---
Keymaster:
  URLS:
    Initial:
      # - inproc://airspyhf.keymaster
      - ipc:///tmp/airspyhf.keymaster
      - tcp://*:42000

  # temporary fix to limit yaml memory use	
  clone_interval: 50

# The architect builds the components and controls their operation via
# the Keymaster.

architect:
    control:
        configuration: iq_monitor

# Components in the system
#
# Each component has a name by which it is known. Some components have 0
# or more data sources, and 0 or more data sinks. The sources are known
# by their URLs. The sinks are just listed by name (for now).

components:
  airspyhf:
    type: AirspyComponent
    devices: []
    ringbuffer_pool_size: 32 # IQ buffer pool size
    Sources:
      iq_data: A
    Transports:
      A:
        Specified: [rtinproc]

# Connection mapping for the various configurations. The mapping is a
# list of lists, which each element of the outer list being a 4-element
# inner list: [source_component, source_name, sink_component, sink_name]

connections:
  iq_monitor:
    - [airspyhf]

# This is the RPC section, for the airspyhf component. The idea is
# that any change to any of the `airspy_*:request` values will trigger
# a publication of that value. Upon receipt the component will execute
# the corresponding function with the given parameters (if any), and
# return any return values in the 'airspy_*:reply' value. That's the
# idea, anyway. The AirspyHF component will have to have a dedicated
# thread to respond to these publications. It will use the internal
# thread in the airspyhf library to publish IQ data over its
# conection.
#
# Multiple devices are supported. An API function that supports a
# specified device, on unpacking the request list, will treat the
# first element as the serial number.

AIRSPYCMDS:
  airspyhf_lib_version:
    request: []
    reply: []
  airspyhf_list_devices:
    request: []
    reply: []
  airspyhf_open:
    request: []
    reply: []
  airspyhf_open_sn:
    request: []
    reply: []
  airspyhf_close:
    request: []
    reply: []
  airspyhf_start:
    request: []
    reply: []
  airspyhf_stop:
    request: []
    reply: []
  airspyhf_is_streaming:
    request: []
    reply: []
  airspyhf_set_frequency:
    request: []
    reply: []
  airspyhf_set_lib_dsp:
    request: []
    reply: []
  airspyhf_get_sample_rates:
    request: []
    reply: []
  airspyhf_set_sample_rate:
    request: []
    reply: []
  airspyhf_get_calibration:
    request: []
    reply: []
  airspyhf_set_calibration:
    request: []
    reply: []
  airspyhf_set_optimal_iq_correction_point:
    request: []
    reply: []
  airspyhf_iq_balancer_configure:
    request: []
    reply: []
  airspyhf_flash_calibration:
    request: []
    reply: []
  airspyhf_board_partid_serialno_read:
    request: []
    reply: []
  airspyhf_version_string_read:
    request: []
    reply: []
  airspyhf_set_user_output:
    request: []
    reply: []
  airspyhf_set_hf_agc:
    request: []
    reply: []
  airspyhf_set_hf_agc_threshold:
    request: []
    reply: []
  airspyhf_set_hf_att:
    request: []
    reply: []
